{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGits.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGits","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAOd,4CACA,2BACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCRdG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEgCC,UAAUH,GAF1C,+DAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVhB,kBAafM,GAbe,4CAAH,sDCERO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAXAC,qBAAU,WAERxB,EAASC,GAAUwB,MAAK,SAAAC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAIZ,CAACpB,IAEGqB,EDjB2BK,CAAa1B,GAAjCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAEtB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,qCAAb,cACZ,yBAAKA,UAAU,aAEXH,EAAOJ,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEV/CkB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,CAAC,cAFd,mBAEzB2C,EAFyB,KAEb5C,EAFa,KAShC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEI4C,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MChB9C8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.66188530.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setinputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setinputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setinputValue('');\n    }\n\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add Category</h2>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifts = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=rtwTbBn2pqKl3ptMZP6zRDBJWODmai5U`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    };\n  });\n  return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGits } from '../hooks/useFetchGits'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGits(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__bounce\">Loading...</p>}\n      <div className=\"card-grid\">\n        {\n          images.map((img) => <GifGridItem key={img.id} {...img} />)\n        }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifts } from '../helpers/getGifs';\n\n// CustomHooks vendia siendo los anteriores Functional Component\nexport const useFetchGits = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  // El useEffect me ayuda a renderizar mi component solo cuando lo que estÃ¡ en el array (segundo parametro) cambia.\n  useEffect(() => {\n\n    getGifts(category).then(imgs => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n\n  }, [category]);\n\n  return state;\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GitExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleCategory = () => {\n  //   // setCategories([...categories, 'Silicon Valley']);\n  //   setCategories(cats => [...categories, 'Silicon Valley']);\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {\n          categories.map(category =>\n            <GifGrid key={category} category={category} />\n          )\n        }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}